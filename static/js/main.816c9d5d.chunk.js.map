{"version":3,"sources":["App.js","index.js"],"names":["GET_TODOS","gql","TOGGLE_DONE","ADD_TODO","DEL_TODO","App","React","useState","newTodo","setNewTodo","useQuery","data","loading","error","useMutation","toggleTodo","onCompleted","alert","delTodo","addTodo","a","id","done","variables","console","log","window","confirm","update","cache","readQuery","query","todos","filter","todo","writeQuery","merge","e","preventDefault","trim","name","refetchQueries","className","role","arial-label","onSubmit","type","autoComplete","autoFocus","placeholder","onChange","target","value","map","onDoubleClick","handleDoneToggle","onClick","handleDeleteTodo","client","ApolloClient","headers","contentType","process","uri","InMemoryCache","rootNode","document","getElementById","ReactDOM","render","ApolloProvider"],"mappings":"wQAGMA,EAAYC,YAAH,2IAUTC,EAAcD,YAAH,0OAYXE,EAAWF,YAAH,gMAYRG,EAAWH,YAAH,+LAsHCI,MA1Gf,WAAgB,IAAD,EACiBC,IAAMC,SAAS,IADhC,mBACNC,EADM,KACGC,EADH,OAEoBC,YAASV,GAAlCW,EAFK,EAELA,KAAMC,EAFD,EAECA,QAASC,EAFV,EAEUA,MAFV,EAGQC,YAAYZ,GAA1Ba,EAHM,sBAIKD,YAAYV,EAAU,CACtCY,YAAa,WACXC,MAAM,gCAFHC,EAJM,sBASKJ,YAAYX,EAAU,CACtCa,YAAa,WACXP,EAAW,IACXQ,MAAM,8BAHHE,EATM,gEAgBb,iCAAAC,EAAA,6DAAkCC,EAAlC,EAAkCA,GAAIC,EAAtC,EAAsCA,KAAtC,SACqBP,EAAW,CAC5BQ,UAAW,CAAEF,KAAIC,MAAOA,KAF5B,OACQX,EADR,OAIEa,QAAQC,IAAId,GAJd,4CAhBa,kEAuBb,+BAAAS,EAAA,yDAAkCC,EAAlC,EAAkCA,IACbK,OAAOC,QAAQ,mCADpC,gCAGuBT,EAAQ,CACzBK,UAAW,CAAEF,MACbO,OAAQ,SAACC,GACP,IACMrB,EADWqB,EAAMC,UAAU,CAAEC,MAAO/B,IACjBgC,MAAMC,QAAO,SAACC,GAAD,OAAUA,EAAKb,KAAOA,KAC5DQ,EAAMM,WAAW,CACfJ,MAAO/B,EACPW,KAAM,CAAEqB,MAAOxB,GACf4B,OAAO,OAXjB,OAGUzB,EAHV,OAeIa,QAAQC,IAAId,GAfhB,4CAvBa,kEA0Cb,WAAmC0B,GAAnC,eAAAjB,EAAA,yDACEiB,EAAEC,iBACG9B,EAAQ+B,OAFf,iEAGqBpB,EAAQ,CACzBI,UAAW,CAAEiB,KAAMhC,GACnBiC,eAAgB,CAAC,CAAEV,MAAO/B,MAL9B,OAGQW,EAHR,OAOEa,QAAQC,IAAId,GAPd,4CA1Ca,sBAoDb,OAAIC,EACK,mBAAG8B,UAAU,SAAb,yBAEL7B,EACK,yDAGP,sBAAK6B,UAAU,qEAAf,UACE,mDACoB,IAClB,uBAAMC,KAAK,MAAMC,cAAY,aAA7B,UACG,IADH,eAMF,uBAAMC,SApEG,4CAoE4BH,UAAU,MAA/C,UACE,uBACEA,UAAU,mBACVI,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,iBACZC,SAAU,SAACb,GAAD,OAAO5B,EAAW4B,EAAEc,OAAOC,QACrCA,MAAO5C,IAET,wBAAQkC,UAAU,0BAA0BI,KAAK,SAAjD,sBAKF,qBAAKJ,UAAU,8CAAf,SACG/B,EAAKqB,MAAMqB,KAAI,SAACnB,GACf,OACE,oBAEEoB,cAAe,kBAxFd,2CAwFoBC,CAAiBrB,IACtCQ,UAAS,6BAAwBR,EAAKZ,MAAQ,UAHhD,UAKGY,EAAKM,KACN,wBACEE,UAAU,mCACVc,QAAS,kBA9FV,2CA8FgBC,CAAiBvB,IAFlC,SAIE,sBAAMQ,UAAU,MAAhB,sBATGR,EAAKb,aCnIlBqC,EAAS,IAAIC,IAAa,CAC9BC,QAAS,CACPC,YAAa,mBAEb,wBAAyBC,oEAG3BC,IAAK,uEACLlC,MAAO,IAAImC,MAGPC,EAAWC,SAASC,eAAe,QACzCC,IAASC,OACP,cAACC,EAAA,EAAD,CAAgBZ,OAAQA,EAAxB,SACE,cAAC,EAAD,MAEFO,K","file":"static/js/main.816c9d5d.chunk.js","sourcesContent":["import React from 'react';\nimport { gql, useQuery, useMutation } from '@apollo/client';\n\nconst GET_TODOS = gql`\n  query getTodos {\n    todos(order_by: { created_at: desc }) {\n      name\n      done\n      id\n    }\n  }\n`;\n\nconst TOGGLE_DONE = gql`\n  mutation toggleDone($id: uuid!, $done: Boolean!) {\n    update_todos(where: { id: { _eq: $id } }, _set: { done: $done }) {\n      returning {\n        name\n        done\n        id\n      }\n    }\n  }\n`;\n\nconst ADD_TODO = gql`\n  mutation addTodo($name: String!) {\n    insert_todos(objects: { name: $name }) {\n      returning {\n        name\n        done\n        id\n      }\n    }\n  }\n`;\n\nconst DEL_TODO = gql`\n  mutation delTodo($id: uuid!) {\n    delete_todos(where: { id: { _eq: $id } }) {\n      returning {\n        name\n        done\n        id\n      }\n    }\n  }\n`;\n\nfunction App() {\n  const [newTodo, setNewTodo] = React.useState('');\n  const { data, loading, error } = useQuery(GET_TODOS);\n  const [toggleTodo] = useMutation(TOGGLE_DONE);\n  const [delTodo] = useMutation(DEL_TODO, {\n    onCompleted: () => {\n      alert('Todo deleted successfully');\n    },\n  });\n  const [addTodo] = useMutation(ADD_TODO, {\n    onCompleted: () => {\n      setNewTodo('');\n      alert('Todo added successfully');\n    },\n  });\n\n  async function handleDoneToggle({ id, done }) {\n    const data = await toggleTodo({\n      variables: { id, done: !done },\n    });\n    console.log(data);\n  }\n\n  async function handleDeleteTodo({ id }) {\n    const confirmDel = window.confirm('Are you sure you want to delete');\n    if (confirmDel) {\n      const data = await delTodo({\n        variables: { id },\n        update: (cache) => {\n          const prevData = cache.readQuery({ query: GET_TODOS });\n          const newTodo = prevData.todos.filter((todo) => todo.id !== id);\n          cache.writeQuery({\n            query: GET_TODOS,\n            data: { todos: newTodo },\n            merge: true,\n          });\n        },\n      });\n      console.log(data);\n    }\n  }\n\n  async function handleNewTodoSubmit(e) {\n    e.preventDefault();\n    if (!newTodo.trim()) return;\n    const data = await addTodo({\n      variables: { name: newTodo },\n      refetchQueries: [{ query: GET_TODOS }],\n    });\n    console.log(data);\n  }\n\n  if (loading) {\n    return <p className='purple'>Loading....</p>;\n  }\n  if (error) {\n    return <p>Error fetching todo ....</p>;\n  }\n  return (\n    <div className='code vh-100 flex flex-column items-center bg-purple pa3 fl-1 white'>\n      <h1>\n        Graphql Checklist{' '}\n        <span role='img' arial-label='Checkmarks'>\n          {' '}\n          âœ…\n        </span>\n      </h1>\n\n      <form onSubmit={handleNewTodoSubmit} className='mb3'>\n        <input\n          className='pa2 f4 b--dashed'\n          type='text'\n          autoComplete='off'\n          autoFocus\n          placeholder='Enter new todo'\n          onChange={(e) => setNewTodo(e.target.value)}\n          value={newTodo}\n        />\n        <button className='pa2 f4 bg-green pointer' type='submit'>\n          Enter\n        </button>\n      </form>\n\n      <div className='flex items-center  flex-column todo-content'>\n        {data.todos.map((todo) => {\n          return (\n            <p\n              key={todo.id}\n              onDoubleClick={() => handleDoneToggle(todo)}\n              className={`pa3 dim f4 pointer ${todo.done && 'strike'}`}\n            >\n              {todo.name}\n              <button\n                className='pointer bg-transparent bn f4 pl3'\n                onClick={() => handleDeleteTodo(todo)}\n              >\n                <span className='red'>&times;</span>\n              </button>\n            </p>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider, ApolloClient, InMemoryCache } from '@apollo/client';\nimport App from './App';\n\nconst client = new ApolloClient({\n  headers: {\n    contentType: 'application/json',\n\n    'x-hasura-admin-secret': process.env.REACT_APP_HASURA_ADMIN_KEY,\n    // 'put your hasura admin secret here ðŸ˜Ž  ',\n  },\n  uri: 'https://graphqh-and-apollo-with-react-todo-app.hasura.app/v1/graphql',\n  cache: new InMemoryCache(),\n});\n\nconst rootNode = document.getElementById('root');\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  rootNode\n);\n"],"sourceRoot":""}